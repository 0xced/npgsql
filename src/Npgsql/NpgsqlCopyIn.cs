// Npgsql.NpgsqlCopyIn.cs
//
// Author:
//     Kalle Hallivuori <kato@iki.fi>
//
//    Copyright (C) 2007 The Npgsql Development Team
//    npgsql-general@gborg.postgresql.org
//    http://gborg.postgresql.org/project/npgsql/projdisplay.php
//
//  INSERT BSD LICENCE HERE :)

using System;
using System.IO;

namespace Npgsql
{
    /// <summary>
    /// Represents a PostgreSQL COPY FROM STDIN operation with a corresponding SQL statement
    /// to execute against a PostgreSQL database
    /// and an associated stream used to read data from (if provided by user)
    /// or for writing it (when generated by driver).
    /// Eg. new NpgsqlCopyIn("COPY mytable FROM STDIN", connection, streamToRead).Start();
    /// </summary>
    public class NpgsqlCopyIn
    {
        private NpgsqlConnector _context;
        private NpgsqlCommand _cmd;
        private Stream _copyStream;
        private bool _disposeCopyStream; // user did not provide stream, so reset it after use

        /// <summary>
        /// Creates NpgsqlCommand to run given query upon Start(). Data for the requested COPY IN operation can then be written to CopyData stream followed by a call to End() or Cancel().
        /// </summary>
        public NpgsqlCopyIn(string copyInQuery, NpgsqlConnection conn) :
            this(new NpgsqlCommand(copyInQuery, conn), conn)
        {}
        
        /// <summary>
        /// Given command is run upon Start(). Data for the requested COPY IN operation can then be written to CopyData stream followed by a call to End() or Cancel().
        /// </summary>
        public NpgsqlCopyIn(NpgsqlCommand cmd, NpgsqlConnection conn) : this(cmd, conn, null)
        {}
        
        /// <summary>
        /// Given command is executed upon Start() and all data from fromStream is passed to it as copy data.
        /// </summary>
        public NpgsqlCopyIn(NpgsqlCommand cmd, NpgsqlConnection conn, Stream fromStream)
        {
            _context = conn.Connector;
            _cmd = cmd;
            _copyStream = fromStream;
        }
        
        /// <summary>
        /// Returns true if the connection is currently reserved for this operation.
        /// </summary>
        public bool IsActive
        {
            get
            {
                return _context != null && _context.CurrentState is NpgsqlCopyInState &&
                    _context.Mediator.CopyStream == _copyStream;
            }
        }

        /// <summary>
        /// The stream provided by user or generated upon Start()
        /// </summary>
        public Stream CopyStream
        {
            get
            {
                return _copyStream;
            }
        }
        
        /// <summary>
        /// The Command used to execute this copy operation.
        /// </summary>
        public NpgsqlCommand NpgsqlCommand
        {
            get
            {
                return _cmd;
            }
        }
        
        /// <summary>
        /// Set before a COPY IN query to define size of internal buffer for reading from given CopyStream.
        /// </summary>
        public int CopyBufferSize
        {
            get
            {
                return _context.Mediator.CopyBufferSize;
            }
            set
            {
                _context.Mediator.CopyBufferSize = value;
            }
        }
        
        /// <summary>
        /// Command specified upon creation is executed as a non-query.
        /// If CopyStream is set upon creation, it will be flushed to server as copy data, and operation will be finished immediately.
        /// Otherwise the CopyStream member can be used for writing copy data to server and operation finished with a call to End() or Cancel().
        /// </summary>
        public void Start()
        {
            if( _context.CurrentState is NpgsqlReadyState )
            {
                _context.Mediator.CopyStream = _copyStream;
                _cmd.ExecuteNonQuery();
                _disposeCopyStream = _copyStream == null;
                _copyStream = _context.Mediator.CopyStream;
                if( _copyStream == null && ! ( _context.CurrentState is NpgsqlReadyState ) )
                {
                    throw new NpgsqlException("Not a COPY IN query: " + _cmd.CommandText);
                }
            }
            else
            {
                throw new NpgsqlException("Copy can only start in Ready state, not in " + _context.CurrentState);
            }
        }

        /// <summary>
        /// Called after writing all data to CopyStream to successfully complete this copy operation.
        /// </summary>
        public void End()
        {
            if( _context != null )
            {
                if(IsActive)
                {
                    _context.CurrentState.SendCopyDone( _context );
                }
                if( _context.Mediator.CopyStream == _copyStream )
                {
                    _context.Mediator.CopyStream = null;
                }
            }
        }

        /// <summary>
        /// Withdraws an already started copy operation. The operation will fail with given error message.
        /// </summary>
        public void Cancel(string message)
        {
            if( _context != null )
            {
                if(IsActive)
                {
                    _context.CurrentState.SendCopyFail( _context, message);
                }
                if( _context.Mediator.CopyStream == _copyStream )
                {
                    _context.Mediator.CopyStream = null;
                    if( _disposeCopyStream )
                    {
                        _copyStream = null;
                    }
                }
            }
        }
    }
}
