using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;
using Npgsql.BackendMessages;

namespace Npgsql
{
    /// <summary>
    /// A non-critical (warning or info) message generated by the backend.
    /// Can be synchronous (i.e. in response to a query) or asynchronous (a totally unrelated
    /// backend-side event).
    /// </summary>
    /// <remarks>
    /// http://www.postgresql.org/docs/9.4/static/protocol-flow.html#PROTOCOL-ASYNC
    /// </remarks>
    public class NpgsqlNotice
    {
        readonly ErrorOrNoticeMessage _msg;

        #region Message Fields

        /// <summary>
        /// Severity of the error or notice.
        /// Always present.
        /// </summary>
        public ErrorSeverity Severity { get { return _msg.Severity; } }

        /// <summary>
        /// The SQLSTATE code for the error.
        /// </summary>
        /// <remarks>
        /// Always present.
        /// See http://www.postgresql.org/docs/9.4/static/errcodes-appendix.html
        /// </remarks>
        public string Code { get { return _msg.Code; } }

        /// <summary>
        /// The primary human-readable error message. This should be accurate but terse.
        /// </summary>
        /// <remarks>
        /// Always present.
        /// </remarks>
        public string MessageText { get { return _msg.Message; } }

        /// <summary>
        /// An optional secondary error message carrying more detail about the problem.
        /// May run to multiple lines.
        /// </summary>
        public string Detail { get { return _msg.Detail; } }

        /// <summary>
        /// An optional suggestion what to do about the problem.
        /// This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts.
        /// May run to multiple lines.
        /// </summary>
        public string Hint { get { return _msg.Hint; } }

        /// <summary>
        /// The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string.
        /// The first character has index 1, and positions are measured in characters not bytes.
        /// 0 means not provided.
        /// </summary>
        public int Position { get { return _msg.Position; } }

        /// <summary>
        /// This is defined the same as the <see cref="Position"/> field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client.
        /// The <see cref="InternalQuery" /> field will always appear when this field appears.
        /// 0 means not provided.
        /// </summary>
        public int InternalPosition { get { return _msg.InternalPosition; } }

        /// <summary>
        /// The text of a failed internally-generated command.
        /// This could be, for example, a SQL query issued by a PL/pgSQL function.
        /// </summary>
        public string InternalQuery { get { return _msg.InternalQuery; } }

        /// <summary>
        /// An indication of the context in which the error occurred.
        /// Presently this includes a call stack traceback of active PL functions.
        /// The trace is one entry per line, most recent first.
        /// </summary>
        public string Where { get { return _msg.Where; } }

        /// <summary>
        /// If the error was associated with a specific database object, the name of the schema containing that object, if any.
        /// </summary>
        /// <remarks>PostgreSQL 9.3 and up.</remarks>
        public string SchemaName { get { return _msg.SchemaName; } }

        /// <summary>
        /// Table name: if the error was associated with a specific table, the name of the table.
        /// (Refer to the schema name field for the name of the table's schema.)
        /// </summary>
        /// <remarks>PostgreSQL 9.3 and up.</remarks>
        public string TableName { get { return _msg.TableName; } }

        /// <summary>
        /// If the error was associated with a specific table column, the name of the column.
        /// (Refer to the schema and table name fields to identify the table.)
        /// </summary>
        /// <remarks>PostgreSQL 9.3 and up.</remarks>
        public string ColumnName { get { return _msg.ColumnName; } }

        /// <summary>
        /// If the error was associated with a specific data type, the name of the data type.
        /// (Refer to the schema name field for the name of the data type's schema.)
        /// </summary>
        /// <remarks>PostgreSQL 9.3 and up.</remarks>
        public string DataTypeName { get { return _msg.DataTypeName; } }

        /// <summary>
        /// If the error was associated with a specific constraint, the name of the constraint.
        /// Refer to fields listed above for the associated table or domain.
        /// (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.)
        /// </summary>
        /// <remarks>PostgreSQL 9.3 and up.</remarks>
        public string ConstraintName { get { return _msg.ConstraintName; } }

        /// <summary>
        /// The file name of the source-code location where the error was reported.
        /// </summary>
        /// <remarks>PostgreSQL 9.3 and up.</remarks>
        public string File { get { return _msg.File; } }

        /// <summary>
        /// The line number of the source-code location where the error was reported.
        /// </summary>
        public string Line { get { return _msg.Line; } }

        /// <summary>
        /// The name of the source-code routine reporting the error.
        /// </summary>
        public string Routine { get { return _msg.Routine; } }

        #endregion

        internal NpgsqlNotice(NpgsqlBuffer buf)
        {
            _msg = new ErrorOrNoticeMessage(buf);
        }

        [ContractInvariantMethod]
        void ObjectInvariants()
        {
            Contract.Invariant(Severity == ErrorSeverity.Log    ||
                               Severity == ErrorSeverity.Info   ||
                               Severity == ErrorSeverity.Debug  ||
                               Severity == ErrorSeverity.Notice ||
                               Severity == ErrorSeverity.Warning);
        }
    }

    /// <summary>
    /// Provides data for a notice event.
    /// </summary>
    public class NpgsqlNoticeEventArgs : EventArgs
    {
        /// <summary>
        /// The Notice that was sent from the database.
        /// </summary>
        public NpgsqlNotice Notice { get; private set; }

        internal NpgsqlNoticeEventArgs(NpgsqlNotice notice)
        {
            Notice = notice;
        }
    }
}
